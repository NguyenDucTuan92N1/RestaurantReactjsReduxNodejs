{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n};\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async amount => {\n  const response = await fetchCount(amount);\n  return response.data;\n});\nexport const counterSlice = createSlice1({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\nexport const selectCount = state => state.counter1.value;\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"sources":["C:/Users/NguyenDucTuan/Desktop/a/daubep/src/features/counter/counterSlice.js"],"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","counterSlice","createSlice1","name","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter1","incrementIfOdd","dispatch","getState","currentValue","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAArB;AAMA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC5C,oBAD4C,EAE5C,MAAOO,MAAP,IAAkB;AAChB,QAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACK,MAAD,CAAjC;AAEA,SAAOC,QAAQ,CAACC,IAAhB;AACD,CAN2C,CAAvC;AASP,OAAO,MAAMC,YAAY,GAAGC,YAAY,CAAC;AACvCC,EAAAA,IAAI,EAAE,SADiC;AAEvCT,EAAAA,YAFuC;AAIvCU,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACX,KAAN,IAAe,CAAf;AACD,KAHO;AAIRY,IAAAA,SAAS,EAAGD,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACX,KAAN,IAAe,CAAf;AACD,KANO;AAQRa,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACpCH,MAAAA,KAAK,CAACX,KAAN,IAAec,MAAM,CAACC,OAAtB;AACD;AAVO,GAJ6B;AAiBvCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWhB,cAAc,CAACiB,OAD1B,EACoCR,KAAD,IAAW;AAC1CA,MAAAA,KAAK,CAACV,MAAN,GAAe,SAAf;AACD,KAHH,EAIGiB,OAJH,CAIWhB,cAAc,CAACkB,SAJ1B,EAIqC,CAACT,KAAD,EAAQG,MAAR,KAAmB;AACpDH,MAAAA,KAAK,CAACV,MAAN,GAAe,MAAf;AACAU,MAAAA,KAAK,CAACX,KAAN,IAAec,MAAM,CAACC,OAAtB;AACD,KAPH;AAQD;AA1BsC,CAAD,CAAjC;AA6BP,OAAO,MAAM;AAAEL,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CP,YAAY,CAACe,OAAjE;AAEP,OAAO,MAAMC,WAAW,GAAIX,KAAD,IAAWA,KAAK,CAACY,QAAN,CAAevB,KAA9C;AAGP,OAAO,MAAMwB,cAAc,GAAIrB,MAAD,IAAY,CAACsB,QAAD,EAAWC,QAAX,KAAwB;AAChE,QAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;AACA,MAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,QAAQ,CAACZ,iBAAiB,CAACV,MAAD,CAAlB,CAAR;AACD;AACF,CALM;AAOP,eAAeG,YAAY,CAACsB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n   \r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice1({\r\n  name: 'counter',\r\n  initialState,\r\n \r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    \r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\nexport const selectCount = (state) => state.counter1.value;\r\n\r\n\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}