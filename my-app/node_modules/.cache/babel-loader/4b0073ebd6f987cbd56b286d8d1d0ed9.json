{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n};\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async amount => {\n  const response = await fetchCount(amount);\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\nexport const selectCount = state => state.counter1.value;\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/daotronghuan1996/Downloads/RestaurantReactjsReduxNodejs/RestaurantReactjsReduxNodejs/my-app/src/features/counter/counterSlice.js"],"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter1","incrementIfOdd","dispatch","getState","currentValue","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAArB;AAMA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC5C,oBAD4C,EAE5C,MAAOO,MAAP,IAAkB;AAChB,QAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACK,MAAD,CAAjC;AAEA,SAAOC,QAAQ,CAACC,IAAhB;AACD,CAN2C,CAAvC;AASP,OAAO,MAAMC,YAAY,GAAGT,WAAW,CAAC;AACtCU,EAAAA,IAAI,EAAE,SADgC;AAEtCR,EAAAA,YAFsC;AAItCS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AAEpBA,MAAAA,KAAK,CAACV,KAAN,IAAe,CAAf;AACD,KAJO;AAKRW,IAAAA,SAAS,EAAGD,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACV,KAAN,IAAe,CAAf;AACD,KAPO;AASRY,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACpCH,MAAAA,KAAK,CAACV,KAAN,IAAea,MAAM,CAACC,OAAtB;AACD;AAXO,GAJ4B;AAkBtCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWf,cAAc,CAACgB,OAD1B,EACoCR,KAAD,IAAW;AAC1CA,MAAAA,KAAK,CAACT,MAAN,GAAe,SAAf;AACD,KAHH,EAIGgB,OAJH,CAIWf,cAAc,CAACiB,SAJ1B,EAIqC,CAACT,KAAD,EAAQG,MAAR,KAAmB;AACpDH,MAAAA,KAAK,CAACT,MAAN,GAAe,MAAf;AACAS,MAAAA,KAAK,CAACV,KAAN,IAAea,MAAM,CAACC,OAAtB;AACD,KAPH;AAQD;AA3BqC,CAAD,CAAhC;AA8BP,OAAO,MAAM;AAAEL,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CN,YAAY,CAACc,OAAjE;AAEP,OAAO,MAAMC,WAAW,GAAIX,KAAD,IAAWA,KAAK,CAACY,QAAN,CAAetB,KAA9C;AAGP,OAAO,MAAMuB,cAAc,GAAIpB,MAAD,IAAY,CAACqB,QAAD,EAAWC,QAAX,KAAwB;AAChE,QAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;AACA,MAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,QAAQ,CAACZ,iBAAiB,CAACT,MAAD,CAAlB,CAAR;AACD;AACF,CALM;AAOP,eAAeG,YAAY,CAACqB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n   \n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n \n  reducers: {\n    increment: (state) => {\n      \n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    \n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\nexport const selectCount = (state) => state.counter1.value;\n\n\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}