{"ast":null,"code":"import _regeneratorRuntime from \"/Users/daotronghuan1996/Downloads/RestaurantReactjsReduxNodejs/RestaurantReactjsReduxNodejs/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/daotronghuan1996/Downloads/RestaurantReactjsReduxNodejs/RestaurantReactjsReduxNodejs/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nvar initialState = {\n  value: 0,\n  status: 'idle'\n};\nexport var incrementAsync = createAsyncThunk('counter/fetchCount', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetchCount(amount);\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport var counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialState,\n  reducers: {\n    increment: function increment(state) {\n      state.value += 1;\n    },\n    decrement: function decrement(state) {\n      state.value -= 1;\n    },\n    incrementByAmount: function incrementByAmount(state, action) {\n      state.value += action.payload;\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(incrementAsync.pending, function (state) {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, function (state, action) {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nvar _counterSlice$actions = counterSlice.actions,\n    increment = _counterSlice$actions.increment,\n    decrement = _counterSlice$actions.decrement,\n    incrementByAmount = _counterSlice$actions.incrementByAmount;\nexport { increment, decrement, incrementByAmount };\nexport var selectCount = function selectCount(state) {\n  return state.counter1.value;\n};\nexport var incrementIfOdd = function incrementIfOdd(amount) {\n  return function (dispatch, getState) {\n    var currentValue = selectCount(getState());\n\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount));\n    }\n  };\n};\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/daotronghuan1996/Downloads/RestaurantReactjsReduxNodejs/RestaurantReactjsReduxNodejs/my-app/src/features/counter/counterSlice.js"],"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter1","incrementIfOdd","dispatch","getState","currentValue","reducer"],"mappings":";;AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAArB;AAMA,OAAO,IAAMC,cAAc,GAAGN,gBAAgB,CAC5C,oBAD4C;AAAA,sEAE5C,iBAAOO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACyBL,UAAU,CAACK,MAAD,CADnC;;AAAA;AACQC,YAAAA,QADR;AAAA,6CAGSA,QAAQ,CAACC,IAHlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAF4C;;AAAA;AAAA;AAAA;AAAA,IAAvC;AASP,OAAO,IAAMC,YAAY,GAAGT,WAAW,CAAC;AACtCU,EAAAA,IAAI,EAAE,SADgC;AAEtCR,EAAAA,YAAY,EAAZA,YAFsC;AAItCS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,mBAACC,KAAD,EAAW;AAEpBA,MAAAA,KAAK,CAACV,KAAN,IAAe,CAAf;AACD,KAJO;AAKRW,IAAAA,SAAS,EAAE,mBAACD,KAAD,EAAW;AACpBA,MAAAA,KAAK,CAACV,KAAN,IAAe,CAAf;AACD,KAPO;AASRY,IAAAA,iBAAiB,EAAE,2BAACF,KAAD,EAAQG,MAAR,EAAmB;AACpCH,MAAAA,KAAK,CAACV,KAAN,IAAea,MAAM,CAACC,OAAtB;AACD;AAXO,GAJ4B;AAkBtCC,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWf,cAAc,CAACgB,OAD1B,EACmC,UAACR,KAAD,EAAW;AAC1CA,MAAAA,KAAK,CAACT,MAAN,GAAe,SAAf;AACD,KAHH,EAIGgB,OAJH,CAIWf,cAAc,CAACiB,SAJ1B,EAIqC,UAACT,KAAD,EAAQG,MAAR,EAAmB;AACpDH,MAAAA,KAAK,CAACT,MAAN,GAAe,MAAf;AACAS,MAAAA,KAAK,CAACV,KAAN,IAAea,MAAM,CAACC,OAAtB;AACD,KAPH;AAQD;AA3BqC,CAAD,CAAhC;4BA8BoDR,YAAY,CAACc,O;IAAzDX,S,yBAAAA,S;IAAWE,S,yBAAAA,S;IAAWC,iB,yBAAAA,iB;;AAErC,OAAO,IAAMS,WAAW,GAAG,SAAdA,WAAc,CAACX,KAAD;AAAA,SAAWA,KAAK,CAACY,QAAN,CAAetB,KAA1B;AAAA,CAApB;AAGP,OAAO,IAAMuB,cAAc,GAAG,SAAjBA,cAAiB,CAACpB,MAAD;AAAA,SAAY,UAACqB,QAAD,EAAWC,QAAX,EAAwB;AAChE,QAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC;;AACA,QAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;AAC1BF,MAAAA,QAAQ,CAACZ,iBAAiB,CAACT,MAAD,CAAlB,CAAR;AACD;AACF,GAL6B;AAAA,CAAvB;AAOP,eAAeG,YAAY,CAACqB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n   \n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n \n  reducers: {\n    increment: (state) => {\n      \n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    \n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\nexport const selectCount = (state) => state.counter1.value;\n\n\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}